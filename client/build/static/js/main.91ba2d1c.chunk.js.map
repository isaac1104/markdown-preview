{"version":3,"sources":["components/InputSection/TextInput.js","actions/types.js","components/InputSection/InputSection.js","actions/index.js","components/PreviewSection/PreviewSection.js","components/Navbar.js","components/App.js","reducers/text_reducer.js","reducers/index.js","serviceWorker.js","index.js"],"names":["TextArea","Input","TextInput","react_default","a","createElement","onChange","this","props","handleChange","style","height","backgroundColor","defaultValue","text","Component","connect","_ref","UPDATE_TEXT_INPUT","InputSection","target","updateTextInput","value","InputSection_TextInput","bind","type","payload","PreviewSection","__html","marked","sanitize","breaks","dangerouslySetInnerHTML","getMarkdownText","color","margin","Header","Layout","Navbar","lineHeight","position","width","zIndex","marginBottom","textAlign","Content","App","layout","padding","alignItems","marginTop","content","container","inputSection","overflow","components_Navbar","row","gutter","col","xs","sm","md","lg","xl","components_InputSection_InputSection","id","components_PreviewSection_PreviewSection","INITIAL_STATE","textReducer","state","arguments","length","undefined","action","rootReducer","combineReducers","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91ba2d1c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input } from 'antd';\r\nimport { connect } from 'react-redux';\r\nconst { TextArea } = Input;\r\n\r\nclass TextInput extends Component {\r\n  render() {\r\n    const style = {\r\n      textArea: {\r\n        height: '100%',\r\n        backgroundColor: '#f2f8ff'\r\n      }\r\n    };\r\n\r\n    return (\r\n      <TextArea\r\n        onChange={this.props.handleChange}\r\n        style={style.textArea}\r\n        defaultValue={this.props.text}\r\n      />\r\n    )\r\n  }\r\n};\r\n\r\nfunction mapStateToProps({ text }) {\r\n  return {\r\n    text\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(TextInput);\r\n","export const UPDATE_TEXT_INPUT = 'UPDATE_TEXT_INPUT';\r\n","import React, { Component } from 'react';\r\nimport TextInput from './TextInput';\r\nimport { connect } from 'react-redux';\r\nimport { updateTextInput } from '../../actions';\r\n\r\nclass InputSection extends Component {\r\n  handleChange({ target }) {\r\n    this.props.updateTextInput(target.value);\r\n  };\r\n\r\n  render() {\r\n    return <TextInput handleChange={this.handleChange.bind(this)} />\r\n  }\r\n};\r\n\r\nexport default connect(null, { updateTextInput })(InputSection);\r\n","import { UPDATE_TEXT_INPUT } from './types';\r\n\r\nexport const updateTextInput = text => ({\r\n  type: UPDATE_TEXT_INPUT,\r\n  payload: text\r\n});\r\n","import React, { Component } from 'react';\r\nimport marked from 'marked';\r\nimport { connect } from 'react-redux';\r\n\r\nclass PreviewSection extends Component {\r\n  getMarkdownText() {\r\n    const rawMarkup = marked(this.props.text, { sanitize: true, breaks: true });\r\n    return {\r\n      __html: rawMarkup\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const style = {\r\n      container: {\r\n        color: '#ffffff',\r\n        margin: '10px 0 0 0'\r\n      }\r\n    };\r\n\r\n    return <div dangerouslySetInnerHTML={this.getMarkdownText()} style={style.container} />\r\n  }\r\n};\r\n\r\nfunction mapStateToProps({ text }) {\r\n  return {\r\n    text\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(PreviewSection);\r\n","import React, { Component } from 'react';\r\nimport { Layout } from 'antd';\r\nconst { Header } = Layout;\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    const style = {\r\n      navbar: {\r\n        lineHeight: '64px',\r\n        backgroundColor: '#202225',\r\n        position: 'fixed',\r\n        width: '100%',\r\n        zIndex: 1,\r\n        marginBottom: '10px',\r\n        textAlign: 'center',\r\n        color: '#ffffff'\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Header style={style.navbar}>\r\n        <h1>Live Markdown Preview</h1>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport InputSection from './InputSection/InputSection';\r\nimport PreviewSection from './PreviewSection/PreviewSection';\r\nimport Navbar from './Navbar';\r\nimport { Col, Row, Layout } from 'antd';\r\nconst { Content } = Layout;\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const style = {\r\n      layout: {\r\n        padding: '0 24px',\r\n        alignItems: 'center',\r\n        marginTop: '60px'\r\n      },\r\n      content: {\r\n        padding: 24,\r\n        margin: 0,\r\n        height: '90vh',\r\n        width: '100vw'\r\n      },\r\n      container: {\r\n        height: '100%'\r\n      },\r\n      inputSection: {\r\n        height: '100%'\r\n      },\r\n      PreviewSection: {\r\n        height: '100%',\r\n        backgroundColor: '#36393f',\r\n        overflow: 'scroll'\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Layout>\r\n        <Navbar />\r\n        <Layout style={style.layout}>\r\n          <Content style={style.content}>\r\n            <Row gutter={16} style={style.container}>\r\n              <Col xs={12} sm={12} md={12} lg={12} xl={12} style={style.inputSection}>\r\n                <InputSection />\r\n              </Col>\r\n              <Col xs={12} sm={12} md={12} lg={12} xl={12} style={style.PreviewSection} id='preview'>\r\n                <PreviewSection />\r\n              </Col>\r\n            </Row>\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { UPDATE_TEXT_INPUT } from '../actions/types';\r\n\r\nconst INITIAL_STATE = `\r\n# Welcome to Live Markdown Preview\r\n---\r\n## Start by editing the text!\r\n### And see how your markdown will look like\r\n---\r\n# Examples\r\n# h1\r\n## h2\r\n### h3\r\n#### h4\r\n##### h5\r\n###### h6\r\n_italic_\r\n*emphasis*\r\n**strong**\r\n> blockquote\r\n`\r\n\r\nfunction textReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case UPDATE_TEXT_INPUT:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default textReducer;\r\n","import { combineReducers } from 'redux';\r\nimport textReducer from './text_reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  text: textReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport reduxThunk from 'redux-thunk';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, {}, composeEnhancers(applyMiddleware(reduxThunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}